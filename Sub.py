
from aiogram import Bot, Dispatcher, executor, types
import pandas as pd
import fileinput

API_TOKEN = ''
open_weather_token = ""
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

sales1 = pd.read_excel('', sheet_name = '–õ–∏—Å—Ç1')
sales2 = pd.read_excel('', sheet_name = '–õ–∏—Å—Ç1')
sales3 = pd.read_excel('', sheet_name = '–õ–∏—Å—Ç1')

name=''

St_or_prep = types.ReplyKeyboardMarkup(resize_keyboard=True)
buttons_text = ('–Ø —Å—Ç—É–¥–µ–Ω—Ç', '–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')
St_or_prep.row(*(types.KeyboardButton(text) for text in buttons_text))

par_ot_k= types.ReplyKeyboardMarkup(resize_keyboard=True)
buttons_text = ('–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã', '–ù–∞–∑–∞–¥‚Ü©')
buttons_text1 = ('–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '')
par_ot_k.row(*(types.KeyboardButton(text) for text in buttons_text))
par_ot_k.row(*(types.KeyboardButton(text) for text in buttons_text1))

vvedite_par= types.ReplyKeyboardMarkup(resize_keyboard=True)
buttons_text = ('–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã', '–ù–∞–∑–∞–¥‚Ü©')
buttons_text1 = ('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '')
vvedite_par.row(*(types.KeyboardButton(text) for text in buttons_text))
vvedite_par.row(*(types.KeyboardButton(text) for text in buttons_text1))

st_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
buttons_text = ('–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã', '')
buttons_text1 =('–û—Ç–≤–µ—Ç–∏—Ç—å', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã')
st_menu.row(*(types.KeyboardButton(text) for text in buttons_text))
st_menu.row(*(types.KeyboardButton(text) for text in buttons_text1))

t_menu = types.ReplyKeyboardMarkup(resize_keyboard=True)
buttons_text = ('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã')
buttons_text1 =('B—ã–π—Ç–∏ –∏–∑ —Å–µ—Å—Å–∏–∏', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤')#B –Ω–≥–ª–∏–π—Å–∫–∞—è
t_menu.row(*(types.KeyboardButton(text) for text in buttons_text))
t_menu.row(*(types.KeyboardButton(text) for text in buttons_text1))


trig1=0
trig2=0
trig3=0
trig4=0
trig5=0
trig6=0

kol_cit = sales3["–ß–∏—Å–ª–æ"][0]

def city():#–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = types.ReplyKeyboardMarkup()
    button1 = types.KeyboardButton("–ú–æ–π –≥–æ—Ä–æ–¥", request_location=True, resize_keyboard=True)
    keyboard.add(button1)
    return keyboard

@dp.message_handler(content_types=['location'])
async def handle_location(message: types.Message):
    global latitude#—à–∏—Ä–æ—Ç–∞ –∏ –¥–æ–ª–≥–æ—Ç–∞
    global longitude#–¥–µ–ª–∞—é –≤—Å–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ —Ç.–∫. –æ–Ω–∏ –Ω—É–∂–Ω—ã –±—É–¥—É—Ç –ø–æ—Ç–æ–º
    global city#–≥–æ—Ä–æ–¥ –≤–∫–æ—Ç–æ—Ä–æ–º–Ω–∞—Ö–æ–¥–∏—Ç—å—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    global chat_id#–∞–π–¥–∏ —á–∞—Ç–∞, –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–∑–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    chat_id = message.chat.id
    latitude = message.location.latitude  # –ø–æ–ª—É—á–∞—é —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    longitude = message.location.longitude
    await message.reply("–í–∞—à –≥–æ—Ä–æ–¥:", reply_markup=St_or_prep)  # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    i = 0
    a = 0
    while i < kol_cit:
        if latitude >= sales3['–ú–∏–Ω–®–∏—Ä–æ—Ç–∞'][i] and latitude <= sales3['–ú–∞–∫—Å–®–∏—Ä–æ—Ç–∞'][i] and longitude >= sales3['–ú–∏–Ω–î–æ–ª–≥–æ—Ç–∞'][i] and longitude <= sales3['–ú–∞–∫—Å–î–æ–ª–≥–æ—Ç–∞'][i]:
            a = 1
            city = sales3['–ì–æ—Ä–æ–¥'][i]
            sil = str(sales3['–°—Å—ã–ª–∫–∞'][i])
            if sil == 'nan':
                await message.reply(city, reply_markup=St_or_prep)
                await message.reply("–ê —Ç—É—Ç –º–æ–≥–ª–∞ –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞)", reply_markup=St_or_prep)
            if sil != 'nan':
                with open(sil, 'rb') as photo:
                    await message.reply_photo(photo, caption=city)
                await message.reply("–ê —Ç—É—Ç –º–æ–≥–ª–∞ –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ –≤ –≥–æ—Ä–æ–¥–µ "+city, reply_markup=St_or_prep)
            break
        i += 1

    if a == 0:
        await message.reply("–ù–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω üåè", reply_markup=St_or_prep)

    else:
        await message.reply('–ö–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å?')

@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    await message.reply("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", reply_markup=city())  # –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç
    await message.reply("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏–ª –≤–∞—à –≥–æ—Ä–æ–¥", reply_markup=city())

@dp.message_handler()
async def button_text(message: types.message):
    button_text = message.text  # —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —ç—Ç–æ
    if button_text == '–Ø —Å—Ç—É–¥–µ–Ω—Ç':
        global trig1
        await message.reply('–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è, –∫—É—Ä—Å –∏ –≥—Ä—É–ø–ø—É. –° –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. \n'
                            '–ø—Ä–∏–º–µ—Ä:\n'
                            '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω 1 –∫—É—Ä—Å 1 –≥—Ä—É–ø–ø–∞')
        trig1=1

    elif trig1 ==1 and button_text!='–Ø —Å—Ç—É–¥–µ–Ω—Ç':
        global name
        trig1=0
        i=0
        button_text = button_text.replace(" ", "_")
        while i < 5:
                a = 0
                if sales1['–§–ò'][i]==button_text:
                    a=1
                    name = button_text
                    break
                i += 1
        if a == 0:
            await message.reply("–í—ã –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", reply_markup=St_or_prep)
        else:
            await message.reply('–ú—ã –í–∞—Å –Ω–∞—à–ª–∏, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∫–æ–º–Ω–∞—Ç—ã', reply_markup=vvedite_par)


    elif button_text == '–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
        global trig2
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å')
        trig2=1

    elif trig2==1 and button_text!='–Ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
        try:
            trig2=0
            i=0
            while i < 3:
                a = 0
                if int(sales2['–ö–æ–¥'][i]) == int(button_text):
                    a = 1
                    break
                i += 1
            if a == 0:
                await message.reply("–í—ã –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", reply_markup=St_or_prep)
            else:
                await message.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, '+sales2['–§–ò'][i], reply_markup=par_ot_k)
        except ValueError:
            await message.reply("–í—ã –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", reply_markup=St_or_prep)

    elif button_text == '–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã':
        global trig3
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –Ω–∞–±–æ—Ä —Ü–∏—Ñ—Ä:')
        trig3=1

    elif trig3==1 and button_text!='–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã':
        trig3=0
        global par
        global file_buf
        par = button_text
        file = open(button_text+'.txt', 'a')
        file_buf = button_text+'.txt'
        file.close()
        await message.reply('–§–∞–π–ª —Å–æ–∑–¥–∞–Ω', reply_markup=t_menu)

    elif button_text == '–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã':
        global trig4
        trig4=1
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:')

    elif trig4==1 and button_text !='–í–≤–µ—Å—Ç–∏ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã':
        trig4=0
        try:
            file = open(button_text+'.txt', 'x+')
            file.close()
        except FileExistsError:
            await message.reply('–í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É', reply_markup=st_menu)
            file = open(button_text + '.txt', 'w')
            file.write(name + '\n')
            file.close()

    elif button_text =='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤':
        await message.reply('–í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫:')
        file = open(file_buf, 'r')
        for string in file:
            await message.reply(string)
        file.close()

    elif button_text == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
        await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞–∫ "?"')

    elif button_text.find('?')>-1:
        print(message.chat.id)
        file = open('q.txt', 'a')
        file.write('–í–æ–ø—Ä–æ—Å –æ—Ç —É—á–∏—Ç–µ–ª—è:'+button_text)
        file.close()
        await message.reply('–í–∞—à –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω')

    elif button_text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã':
        file=open('q.txt', 'r+')
        for string in file:
            await message.reply(string)
        file.truncate(0)
        file.close()

    elif button_text == '–û—Ç–≤–µ—Ç–∏—Ç—å':
        global trig5
        await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç:')
        trig5=1

    elif trig5==1 and button_text!='–û—Ç–≤–µ—Ç–∏—Ç—å':
        trig5=0
        file = open('otv.txt', 'r+')
        file.write('–û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞ '+name+': '+button_text)
        file.close()
        await message.reply('–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')

    elif button_text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã':
        file = open('otv.txt', 'r+')
        for string in file:
            await message.reply(string)
        file.truncate(0)
        file.close()

    elif button_text == '–í—ã–π—Ç–∏ –∏–∑ —Å–µ—Å—Å–∏–∏':
        await message.reply('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é', reply_markup=St_or_prep)
        for line in fileinput.input(file_buf, inplace=True):
            if name in line:
                continue

    elif button_text == '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        global trig6
        file = open('rasp.txt', 'r')
        spis=[]
        sep = "\n"
        i=0
        for string in file:
            spis.insert(i, string)
            i+=1
        file.close()
        await message.reply('–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:')
        await message.reply((sep.join(map(str, spis))))
        await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ—Ç–ª—å–Ω–æ –ù–ï –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É):')
        trig6=1

    elif button_text != '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' and trig6==1:
        trig6=0
        file = open('rasp.txt', 'w')
        file.write(button_text)
        file.close()
        await message.reply('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ')


    elif button_text =='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        file = open('rasp.txt', 'r')
        sep = "\n"
        spis = []
        i = 0
        for string in file:
            spis.insert(i, string)
            i += 1
        file.close()
        await message.reply('–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:')
        await message.reply((sep.join(map(str, spis))))
        file.close()

    elif button_text == 'B—ã–π—Ç–∏ –∏–∑ —Å–µ—Å—Å–∏–∏':
        await message.reply('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é', reply_markup=St_or_prep)

    elif button_text == '–ù–∞–∑–∞–¥':
        await message.reply('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é', reply_markup=St_or_prep)

    else:
        await message.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Ç–æ', reply_markup= St_or_prep)


if __name__ == '__main__':
    executor.start_polling(dp)
